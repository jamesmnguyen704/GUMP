---
import Layout from '../../layouts/Layout.astro';
import FullBlogPost from '../../components/FullBlogPost.astro';
---

<Layout title="Git Basics: Cloning and Pushing to GitHub">
    <FullBlogPost
        title="Git Basics: Cloning and Pushing to GitHub"
        date="18 Apr 2025"
        readTime="5 mins read"
        category="Development"
        author="James Nguyen"
    >
        <h2>Introduction</h2>
        <p>
            Understanding how to work with Git and GitHub is essential for modern development. Here's a step-by-step guide on how to clone a repository and push changes back to GitHub.
        </p>

        <h2>1. Cloning a Repository</h2>
        <p>
            First, you'll need to clone the repository to your local machine. Open a terminal and navigate to your desired directory:
        </p>
        <pre><code>cd C:\Users\James\Projects\PracticePython</code></pre>
        <p>
            Then, clone the repository using the GitHub URL:
        </p>
        <pre><code>git clone https://github.com/jamesmnguyen704/skills.git</code></pre>
        <p>
            This will create a new folder named 'skills' containing all the repository contents.
        </p>

        <h2>2. Adding Files to the Repository</h2>
        <p>
            After cloning, you can add your existing files to the repository by moving them into the newly created folder.
        </p>

        <h2>3. Pushing Changes to GitHub</h2>
        <p>
            Once your files are in place, follow these steps to push them to GitHub:
        </p>
        <ol>
            <li>Navigate to the repository folder:
                <pre><code>cd skills</code></pre>
            </li>
            <li>Stage all changes:
                <pre><code>git add .</code></pre>
            </li>
            <li>Commit the changes with a descriptive message:
                <pre><code>git commit -m "Add existing files"</code></pre>
            </li>
            <li>Push the changes to GitHub:
                <pre><code>git push</code></pre>
            </li>
        </ol>

        <h2>Best Practices</h2>
        <ul>
            <li>Always use meaningful commit messages that describe your changes</li>
            <li>Regularly pull changes from the remote repository before making new changes</li>
            <li>Create branches for new features or significant changes</li>
            <li>Review your changes before committing them</li>
        </ul>
    </FullBlogPost>
</Layout>